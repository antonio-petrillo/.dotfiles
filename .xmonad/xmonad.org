#+title: Xmonad

* My Xmonad configuration
Remember to redefine the alias in ~.xmonad/lib/Color.hs~!
Use ~ln -s $HOME/.cache/wal/colors.hs $HOME/.xmonad/lib/Colors.hs~
Dotfiles for my Xmonad configuration, it include:
+ Pywal colorscheme
+ Xmobar integration (it also include pywal configuration)
+ Gridselect (need improvment)
+ EWMH (support fullscreen for application, like a youtube video)
+ Scratchpad
+ EZconfig for keybindings
* Import
Just all the libraries needed to compile Xmonad.
#+begin_src haskell :tangle xmonad.hs
import XMonad hiding ((|||))
import System.IO
import System.Exit

import Colors

import qualified XMonad.StackSet as W
import qualified Data.Map        as M
import qualified Data.ByteString as B
import qualified Codec.Binary.UTF8.String as UTF8
import qualified DBus as D
import qualified DBus.Client as D

import Control.Monad (liftM2)
import Graphics.X11.ExtraTypes.XF86

import XMonad.ManageHook
import XMonad.Util.NamedScratchpad
import XMonad.Util.SpawnOnce
import XMonad.Util.Run (spawnPipe)
import XMonad.Util.EZConfig
import XMonad.Util.Replace

import XMonad.Hooks.ManageDocks (avoidStruts)
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.EwmhDesktops
import XMonad.Hooks.SetWMName
import XMonad.Hooks.ManageHelpers(doFullFloat, doCenterFloat, isFullscreen, isDialog)

import XMonad.Actions.MouseResize
import XMonad.Actions.WithAll (sinkAll, killAll)
import XMonad.Actions.CycleWS

import XMonad.Layout.Spacing
import XMonad.Layout.Tabbed
import XMonad.Layout.NoBorders
import XMonad.Layout.Renamed
import XMonad.Layout.Spiral
import XMonad.Layout.MultiToggle
import XMonad.Layout.MultiToggle.Instances
import XMonad.Layout.Accordion
import XMonad.Layout.WindowNavigation
import XMonad.Layout.LimitWindows
import XMonad.Layout.SimplestFloat
import XMonad.Layout.LayoutCombinators
import qualified XMonad.Layout.ToggleLayouts as T (toggleLayouts, ToggleLayout(Toggle))
import XMonad.Layout.WindowArranger (windowArrange, WindowArrangerMsg(..))
import Data.Maybe (isJust, fromJust)

import XMonad.Actions.GridSelect
#+end_src
* Variable definition
All the parameter needed to customize Xmonad.
** Default app
Default application that I use, could be improved.
#+begin_src haskell :tangle xmonad.hs
myTerminal         = "alacritty"
myFallbackTerminal = "cool-retro-term"
myLauncher         = "rofi -modi run,drun -show drun -show-icons"
myFileManager      = "nemo"
myBrowser          = "google-chrome-stable"
myEditor           = "emacsclient -c -a \"emacs\""

#+end_src
** Xmonad Variables
Variable to customize some Xmonad behaviour.
#+begin_src haskell :tangle xmonad.hs
myBorderWidth   = 2
myGaps          = 4

myFocusFollowsMouse :: Bool
myFocusFollowsMouse = True

myModMask       = mod4Mask

myWorkspaces    = map show [1..10]
myWorkspaceIndices = M.fromList $ zipWith (,) myWorkspaces [1..]

myNormalBorderColor  = background
myFocusedBorderColor = foreground

--myFont = "xft:JetBrainsMono:style=Regular"
myFont = "xft:Tamzen:style=Regular"

myTabTheme = def { fontName            = myFont
                 , activeColor         = background
                 , inactiveColor       = background
                 , activeBorderColor   = color1
                 , inactiveBorderColor = color15
                 , activeTextColor     = foreground
                 , inactiveTextColor   = foreground
                 }

#+end_src
** TODO Gridselect
GridSelect definition, need improvment:
1. [ ] customize theme throw pywal
2. [ ] define better system & app grid
#+begin_src haskell :tangle xmonad.hs
myColorizer = colorRangeFromClassName
              (0x2e,0x34,0x40) -- lowest  inactive bg #2e3440
              (0x2e,0x34,0x40) -- highest inactive bg #2e3440
              (0xb4,0x8d,0xad) -- active bg           #b48dad
              (0x88,0xc0,0xd0) -- inactive fg         #88c0d0
              (0x28,0x2c,0x34) -- active fg           #2e3440

myGridNavigationKey = makeXEventhandler $ shadowWithKeymap navKeyMap navDefaultHandler
 where navKeyMap = M.fromList [
          ((0,xK_Escape), cancel)
         ,((0,xK_Return), select)
         ,((0,xK_slash) , substringSearch myGridNavigationKey)
         ,((0,xK_Left)  , move (-1,0)  >> myGridNavigationKey)
         ,((0,xK_h)     , move (-1,0)  >> myGridNavigationKey)
         ,((0,xK_Right) , move (1,0)   >> myGridNavigationKey)
         ,((0,xK_l)     , move (1,0)   >> myGridNavigationKey)
         ,((0,xK_Down)  , move (0,1)   >> myGridNavigationKey)
         ,((0,xK_j)     , move (0,1)   >> myGridNavigationKey)
         ,((0,xK_Up)    , move (0,-1)  >> myGridNavigationKey)
         ,((0,xK_k)    , move (0,-1)  >> myGridNavigationKey)
         ,((0,xK_space) , setPos (0,0) >> myGridNavigationKey)
         ]
       -- The navigation handler ignores unknown key symbols
       navDefaultHandler = const myGridNavigationKey

spawnSelected' lst = gridselect conf lst >>= flip whenJust spawn
    where conf = def
                   { gs_cellheight   = 40
                   , gs_cellwidth    = 200
                   , gs_cellpadding  = 6
                   , gs_originFractX = 0.5
                   , gs_originFractY = 0.5
                   , gs_font         = myFont
                   }


myGridConfig colorizer = (buildDefaultGSConfig myColorizer)
    { gs_cellheight   = 40
    , gs_cellwidth    = 200
    , gs_cellpadding  = 6
    , gs_originFractX = 0.5
    , gs_originFractY = 0.5
    , gs_font         = myFont
    , gs_navigate     = myGridNavigationKey
    }

-- create a better grid select
mySysGrid = [ ("Emacs", "emacsclient -c -a emacs")
                 , ("Update Arch", "alacritty -t update-arch -e sudo pacman -Syu")
                 , ("Update AUR", "alacritty -t update-arch -e yay -Syu")
                 , ("Topgrade", "alacritty -t update-arch -e topgrade")
                 -- , ("XMonad Config", emacsExec ++ "'(dired \"~/.xmonad\")'")
                 -- , ("Emacs Config", emacsExec ++ "'(dired \"~/.config/doom\")'")
                 ]

myAppGrid = [ ("Emacs", "emacsclient -c -a emacs")
                 , ("Vim", "alacritty -e vim")
                 , ("Google", "google-chrome-stable")
                 , ("Spotify", "spotify")
                 , ("Teams", "teams")
                 , ("Telegram", "telegram-desktop")
                 , ("File Manager", myFileManager)
                 , ("Terminal", myTerminal)
                 , ("Cool Terminal", myFallbackTerminal)
                 , ("Color Picker", "kcolorchooser")
                 , ("PDF reader", "okular")
                 ]

#+end_src
** TODO Scratchpad
Some useful scratchpad (dropdown application), need improvment:
1. [ ] add browser scratchpad
2. [ ] improve htop scratchpad
#+begin_src haskell :tangle xmonad.hs
myScratchpad =[ NS "dropdown"     spawnTerm              findTerm             manageTerm,
                NS "sys_monitor"  spawnHtop              findHtop             manageHtop,
                NS "calculator"   officeLaunchCalculator officeFindCalculator officeManageCalculator
              ]
        where
          spawnHtop              = myTerminal ++ " -t htop_term -e htop"
          findHtop               = title =? "htop_term"
          manageHtop             = doCenterFloat
          spawnTerm              = myTerminal ++ " -t dropdown" -- -e tmux "
          findTerm               = title =? "dropdown"
          manageTerm             = doCenterFloat
          officeLaunchCalculator = "qalculate-gtk"
          officeFindCalculator   = title =? "Qalculate!"
          officeManageCalculator = doCenterFloat
--            where
--              h = 0.9
--              w = 0.9
--              t = 0.95 - h
--              l = 0.95 - w

#+end_src
* TODO Keybindings
One of the core section of this configuration.
+ [ ] add org table with keybindings
#+begin_src haskell :tangle xmonad.hs
myKeys conf@(XConfig {XMonad.modMask = modKey}) = M.fromList $
    [((m .|. modKey, k), windows $ f i)
        | (i, k) <- zip (XMonad.workspaces conf) ([xK_1 .. xK_9] ++ [xK_0])
        , (f, m) <- [(W.greedyView, 0), (W.shift, shiftMask)]]

myAdditionalKeys = [ -- Basic keybindings
                     ("M-<Return>"  , spawn $ myTerminal)
                   , ("M-S-t"       , spawn $ myFallbackTerminal)
                   , ("M-d"         , spawn myLauncher)
                   , ("M-w"         , spawn myBrowser)
                   , ("M-v"         , spawn "pavucontrol")
                   , ("M-S-<Return>", spawn myFileManager)
                   , ("M-S-q"       , kill)
                   , ("M-C-S-q"     , killAll)
                   , ("M-<Space>"   , sendMessage NextLayout)
                   , ("M-n"         , refresh)
                   , ("M-<Tab>"     , windows W.focusDown)
                   , ("M-S-<Tab>"   , windows W.focusUp)
                   , ("M1-<Tab>"    , windows W.focusDown)
                   , ("M1-S-<Tab>"  , windows W.focusUp)
                   , ("M-j"         , windows W.focusDown)
                   , ("M-k"         , windows W.focusUp)
                   , ("M-m"         , windows W.focusMaster)
                   , ("M-C-<Return>", windows W.swapMaster)
                   , ("M-S-j"       , windows W.swapDown)
                   , ("M-S-k"       , windows W.swapUp)
                   , ("M-h"         , sendMessage Shrink)
                   , ("M-l"         , sendMessage Expand)
                   , ("M-t"         , withFocused $ windows . W.sink)
                   , ("M-,"         , prevWS)
                   , ("M-."         , nextWS)
                   , ("M-S-,"       , prevScreen)
                   , ("M-S-."       , nextScreen)
                   , ("M-f"         , sendMessage $ Toggle FULL)
                   , ("M-S-f"       , sendMessage (T.Toggle "floats"))
                   , ("M-C-t"       , spawn $ "~/.xmonad/scripts/pywal_choose_wallpaper.sh") -- change theme
                   , ("M-S-x"       , io (exitWith ExitSuccess))
                   , ("M-x"         , spawn $ "killall xmobar; ~/.xmonad/scripts/xmobar_pywal_color_sync.sh; xmonad --recompile; xmonad --restart")
                   , ("M-<Esc>"     , spawn $ "xkill")

                   -- Layout shortcut
                   , ("M-S-l 0"     , sendMessage $ JumpToLayout "tall")
                   , ("M-S-l a"     , sendMessage $ JumpToLayout "accordion")
                   , ("M-S-l t"     , sendMessage $ JumpToLayout "tabs")
                   , ("M-S-l b"     , sendMessage $ JumpToLayout "fibonacci")

                   -- Emacs integration
                   , ("M-e"           , spawn myEditor)

                   -- GridSelect
                   , ("M-g g"       , goToSelected $ myGridConfig myColorizer)
                   , ("M-g a"       , spawnSelected' myAppGrid)
                   , ("M-g s"       , spawnSelected' mySysGrid)
                   , ("M-g b"       , bringSelected $ myGridConfig myColorizer)

                   -- Named scratchpad
                   , ("M-s d"  , namedScratchpadAction myScratchpad  "dropdown")
                   , ("M-<F12>"  , namedScratchpadAction myScratchpad  "dropdown")
                   , ("M-s h"  , namedScratchpadAction myScratchpad  "sys_monitor")

                    -- XF86 keys
                   , ("<XF86AudioMute>"       , spawn "pactl set-sink-mute @DEFAULT_SINK@ toggle")
                   , ("<XF86AudioLowerVolume>", spawn "pactl set-sink-volume @DEFAULT_SINK@ -10%")
                   , ("<XF86AudioRaiseVolume>", spawn "pactl set-sink-volume @DEFAULT_SINK@ +10%")
                   , ("<XF86MonBrightnessDown>", spawn "brightnessctl set 5%- -q")
                   , ("<XF86MonBrightnessUp>", spawn "brightnessctl set 5%+ -q")
                   , ("<Print>", spawn "flameshot gui -p ~/Pictures/Screenshots")
                   , ("S-<Print>", spawn "flameshot screen -p ~/Pictures/Screenshots")
                   ]

#+end_src

* Mouse bindings
This section could be expanded
#+begin_src haskell :tangle xmonad.hs
myMouseBindings (XConfig {XMonad.modMask = modMask}) = M.fromList $
    [ ((modMask, button1), (\w -> focus w >> mouseMoveWindow w))
    , ((modMask, button2), (\w -> focus w >> windows W.swapMaster))
    , ((modMask, button3), (\w -> focus w >> mouseResizeWindow w))
    ]

#+end_src
* Layout
Layout definition, usually I only use tall and tab layout, but sometime accordion and spiral come in handy.
#+begin_src haskell :tangle xmonad.hs
myLayout = avoidStruts $ mouseResize $ windowArrange $ T.toggleLayouts floats
           $ mkToggle (NOBORDERS ?? FULL ?? EOT) myDefaultLayout
         where
           myDefaultLayout = tall
                             -- ||| tallAccordion
                             ||| tabs
                             ||| spirals
                             -- ||| floats

tall = renamed [Replace "tall"]
       $ smartBorders
       $ spacing myGaps
       $ Tall 1 (3/100) (1/2)

spirals = renamed [Replace "fibonacci"]
        $ smartBorders
        $ spacing myGaps
        $ spiral (6/7)

tabs = renamed [Replace "tabs"]
     $ tabbed shrinkText myTabTheme

tallAccordion = renamed [Replace "accordion"]
              $ Accordion

floats = renamed [Replace "floats"]
       $ smartBorders
       $ limitWindows 20 simplestFloat

#+end_src
* Manage Hook
Rule to apply on new spawned app, very basic configuration.
Here I can, for example, specify to always open /Gimp/ on /workspace 3/
#+begin_src haskell :tangle xmonad.hs
myManageHook = composeAll . concat $
    [ [className =? "MPlayer"             --> doFloat]
    , [className =? "Gimp"                --> doFloat]
    , [className =? "guake"               --> doFloat]
    , [className =? "Sxiv"               --> doCenterFloat]
    , [resource  =? "desktop_window"      --> doIgnore] ]

#+end_src
* Log Hook
Honestly I don't remeber what log hook do 😅.
#+begin_src haskell :tangle xmonad.hs
myLogHook = return ()

#+end_src
* Startup hook
Autostart app, can be changed to call an autostart script.
#+begin_src haskell :tangle xmonad.hs
myStartupHook = do
    -- spawnOnce "~/.xmonad/scripts/autostart.sh"
    spawnOnce $ "feh --bg-scale " ++ wallpaper
    spawnOnce $ "setxkbmap us -option caps:ctrl_modifier"
    spawnOnce "killall picom" -- kill current picom on each restart
    spawnOnce $ "picom --configuration ~/.dotfiles/.xmonad/picom.conf"
    spawnOnce $ "/usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1 && eval $(gnome-keyring-daemon -s --components=pkcs11,secrets,ssh,gpg)"
    spawn "emacs --daemon"
    setWMName "LG3D"
#+end_src
* Main
** Configuration
Just assemble all the piece seen before.
#+begin_src haskell :tangle xmonad.hs
myConfig = defaultConfig {
        terminal           = myTerminal,
        focusFollowsMouse  = myFocusFollowsMouse,
        borderWidth        = myBorderWidth,
        modMask            = myModMask,
        workspaces         = myWorkspaces,
        normalBorderColor  = myNormalBorderColor,
        focusedBorderColor = myFocusedBorderColor,

        keys               = myKeys,
        mouseBindings      = myMouseBindings,

        layoutHook         = myLayout,
        manageHook         = myManageHook <+> manageDocks <+> namedScratchpadManageHook myScratchpad,
        logHook            = myLogHook,
        startupHook        = myStartupHook
    }

#+end_src
** Xmobar utilities
Utilities for Xmobar, includes:
1. Count the number of windows open in a specific workspace
2. Clickable workspace (i.e. click on the bar to change workspace)
#+begin_src haskell :tangle xmonad.hs
clickable ws = "<action=xdotool key super+"++show i++">"++ws++"</action>"
    where i = fromJust $ M.lookup ws myWorkspaceIndices

windowCount :: X (Maybe String)
windowCount = gets $ Just . show . length . W.integrate' . W.stack . W.workspace . W.current . windowset

#+end_src
** Main
Setup the window manager, launch xmobar ans specify color for bar workspaces (generated by pywal)
#+begin_src haskell :tangle xmonad.hs
main = do
  xmproc0 <- spawnPipe $ "xmobar ~/.xmonad/xmobar/xmobarrc0"
  xmproc1 <- spawnPipe $ "xmobar ~/.xmonad/xmobar/xmobarrc1"
  xmonad $ ewmh myConfig
    { handleEventHook = docksEventHook <+> fullscreenEventHook
    , logHook         = dynamicLogWithPP $ xmobarPP
                           { ppOutput          = \x -> hPutStrLn xmproc0 x -- xmobar on main monitor
                                                       >> hPutStrLn xmproc1 x -- xmobar on secondary monitor
                           , ppCurrent         = xmobarColor color12 "" . wrap "[" "]"
                           , ppVisible         = xmobarColor color12 "" . clickable
                           , ppHidden          = xmobarColor color10 "" . wrap "*" "" . clickable
                           , ppHiddenNoWindows = xmobarColor color2 "" . clickable
                           , ppTitle           = xmobarColor color13 "" . shorten 60
                           , ppSep             = "<fc=" ++ color3 ++ "> <fn=2>|</fn> </fc>"
                           , ppUrgent          = xmobarColor color1 "" . wrap "!" "!"
                           , ppExtras          = [windowCount]
                           , ppOrder           = \(ws:l:t:ex) -> [ws,l] ++ ex ++ [t]
                           }
    } `additionalKeysP` myAdditionalKeys
#+end_src
* Xmobar template
Unfortunely I am to lazy to rewrite this two configuration in haskell, mainly to use the colorscheme generated by pywal.
So I use this template and generate a proper config file with a script, see this article by [[https://dev.to/mafflerbach/colortheme-switching-with-pywall-for-xmonad-and-xmobar-224l][mafflerbach]] for a proper explanation.
My script is identical, the only difference is that I use ~awk~ instead of ~yq~.
I don't have included a system tray, like trayer, because I don't like the integration with Xmobar, it's too hacky, my plan are to add a system tray in widget made with [[https://github.com/elkowar/eww][eww]].
The bar is a little bit incosisten, but it's a good starting point.
** Screen 0
#+begin_src haskell :tangle ./template/xmobar/xmobarrc0-template
Config {
  font = "xft:Tamzen:pixelsize=16:antialias=true:hinting=true"
     , additionalFonts = [ "xft:Font Awesome 5 Free:pixelsize=9"
                         , "xft:mononoki Nerd Font:pixelsize=12:antialias=true:hinting=true"
                         , "xft:Font Awesome 5 Brands:pixelsize=9:antialias=true:hinting=true"]
     , borderColor = "black"
     , bgColor  = "BGCOLOR"
     , fgColor  = "FGCOLOR"
     , border = TopB
     , alpha = 255
     , position = Static {xpos = 0, ypos = 0, width = 1920, height = 32}    -- config for 1 monitor
     , textOffset = -1
     , iconOffset = -1
     , lowerOnStart = False
     , pickBroadest = False
     , persistent = True
     , hideOnStart = False
     , allDesktops = True
     , overrideRedirect = True
     , commands = [ Run Cpu ["-t", "<fc=FGCOLOR><bar></fc>",
                  "-f", ":",
                  "-H", "75",
                  "-L", "25",
                  "-h", "COLOR1",
                  "-n", "COLOR2",
                  "-l", "COLOR3" ] 10
                  ,Run Memory  [ "-t", "<fc=FGCOLOR><usedbar></fc>",
                      "-f", ":",
                      "-H", "75",
                      "-L", "25",
                      "-h", "COLOR1",
                      "-n", "COLOR2",
                      "-l", "COLOR3" ] 10
                  , Run BatteryP ["BAT0"]
                                ["-t", "<fc=FGCOLOR><fn=2>\xf581 </fn></fc>: <left>%", "-L", "10", "-H", "80", "-p", "3",
                                 "--", "-O", "", "-i", "", "-L", "-15", "-H", "-5",
                                 "-l", "red", "-m", "blue", "-h", "green" ] 600
                  , Run Date "%a %b %d, %H:%M" "date" 10
                  , Run UnsafeStdinReader
                  ]
     , sepChar = "%"
     , alignSep = "}{"
     , template = "<fc=COLOR3><fn=2> </fn></fc> <fc=COLOR3>|</fc> %UnsafeStdinReader% }{ Cpu: %cpu% Mem: %memory% %battery% %date% "
     }
#+end_src
**  Screen 1
#+begin_src haskell :tangle ./template/xmobar/xmobarrc1-template
Config {
  -- font = "xft:Fira Code Nerd Font:pixelsize=12:antialias=true:hinting=true"
  font = "xft:Tamzen:pixelsize=16:antialias=true:hinting=true"
     , additionalFonts = [ "xft:Font Awesome 5 Free:pixelsize=9"
                         , "xft:mononoki Nerd Font:pixelsize=12:antialias=true:hinting=true"
                         , "xft:Font Awesome 5 Brands:pixelsize=9:antialias=true:hinting=true"]
     , borderColor = "black"
     , border = TopB
     , bgColor  = "BGCOLOR"
     , fgColor  = "FGCOLOR"
     , alpha = 255
     , position = Static {xpos = 1920, ypos = 0, width = 1920, height = 32} -- config for 2 monitor
     , textOffset = -1
     , iconOffset = -1
     , lowerOnStart = False
     , pickBroadest = False
     , persistent = True
     , hideOnStart = False
     , allDesktops = True
     , overrideRedirect = True
     , commands = [ Run Cpu ["-t", "<fc=FGCOLOR><bar></fc>",
                  "-f", ":",
                  "-H", "75",
                  "-L", "25",
                  "-h", "COLOR1",
                  "-n", "COLOR2",
                  "-l", "COLOR3" ] 10
                  ,Run Memory  [ "-t", "<fc=FGCOLOR><usedbar></fc>",
                      "-f", ":",
                      "-H", "75",
                      "-L", "25",
                      "-h", "COLOR1",
                      "-n", "COLOR2",
                      "-l", "COLOR3" ] 10
                  , Run BatteryP ["BAT0"]
                                ["-t", "<fc=FGCOLOR><fn=2>\xf581 </fn></fc>: <left>%", "-L", "10", "-H", "80", "-p", "3",
                                 "--", "-O", "", "-i", "", "-L", "-15", "-H", "-5",
                                 "-l", "red", "-m", "blue", "-h", "green" ] 600
                  , Run Date "%a %b %d, %H:%M" "date" 10
                  , Run UnsafeStdinReader
                  ]
     , sepChar = "%"
     , alignSep = "}{"
     , template = "<fc=COLOR3><fn=2> </fn></fc> <fc=COLOR3>|</fc> %UnsafeStdinReader% }{ Cpu: %cpu% Mem: %memory% %date% "
     }

#+end_src
** Script
#+begin_src shell :tangle ./scripts/xmobar_pywal_color_sync.sh
#!/usr/bin/env bash

input="$HOME/.xmonad/lib/Colors.hs"

background=$(awk -F'=' '$1 == "background"{print $2}' $input | sed 's/"//g')
foreground=$(awk -F'=' '$1 == "foreground"{print $2}' $input | sed 's/"//g')

color0=$(awk -F'=' '$1 == "color0"{print $2}' $input | sed 's/"//g')
color1=$(awk -F'=' '$1 == "color1"{print $2}' $input | sed 's/"//g')
color2=$(awk -F'=' '$1 == "color2"{print $2}' $input | sed 's/"//g')
color3=$(awk -F'=' '$1 == "color3"{print $2}' $input | sed 's/"//g')
color4=$(awk -F'=' '$1 == "color4"{print $2}' $input | sed 's/"//g')
color5=$(awk -F'=' '$1 == "color5"{print $2}' $input | sed 's/"//g')
color6=$(awk -F'=' '$1 == "color6"{print $2}' $input | sed 's/"//g')
color7=$(awk -F'=' '$1 == "color7"{print $2}' $input | sed 's/"//g')
color8=$(awk -F'=' '$1 == "color8"{print $2}' $input | sed 's/"//g')
color9=$(awk -F'=' '$1 == "color9"{print $2}' $input | sed 's/"//g')
color10=$(awk -F'=' '$1 == "color10"{print $2}' $input | sed 's/"//g')
color11=$(awk -F'=' '$1 == "color11"{print $2}' $input | sed 's/"//g')
color12=$(awk -F'=' '$1 == "color12"{print $2}' $input | sed 's/"//g')
color13=$(awk -F'=' '$1 == "color13"{print $2}' $input | sed 's/"//g')
color14=$(awk -F'=' '$1 == "color14"{print $2}' $input | sed 's/"//g')
color15=$(awk -F'=' '$1 == "color15"{print $2}' $input | sed 's/"//g')

sed -e "s/BGCOLOR/$background/g" \
    -e "s/FGCOLOR/$foreground/g" \
    -e "s/COLOR1/$color1/g" \
    -e "s/COLOR2/$color2/g" \
    -e "s/COLOR3/$color3/g" \
    -e "s/COLOR4/$color4/g" \
    -e "s/COLOR5/$color5/g" \
    -e "s/COLOR6/$color6/g" \
    -e "s/COLOR7/$color7/g" \
    -e "s/COLOR8/$color8/g" \
    -e "s/COLOR9/$color9/g" \
    -e "s/COLOR10/$color10/g" \
    -e "s/COLOR11/$color11/g" \
    -e "s/COLOR12/$color12/g" \
    -e "s/COLOR13/$color13/g" \
    -e "s/COLOR14/$color14/g" \
    -e "s/COLOR15/$color15/g" \
    "$HOME"/.xmonad/template/xmobar/xmobarrc1-template > "$HOME"/.xmonad/xmobar/xmobarrc1


sed -e "s/BGCOLOR/$background/g" \
    -e "s/FGCOLOR/$foreground/g" \
    -e "s/COLOR1/$color1/g" \
    -e "s/COLOR2/$color2/g" \
    -e "s/COLOR3/$color3/g" \
    -e "s/COLOR4/$color4/g" \
    -e "s/COLOR5/$color5/g" \
    -e "s/COLOR6/$color6/g" \
    -e "s/COLOR7/$color7/g" \
    -e "s/COLOR8/$color8/g" \
    -e "s/COLOR9/$color9/g" \
    -e "s/COLOR10/$color10/g" \
    -e "s/COLOR11/$color11/g" \
    -e "s/COLOR12/$color12/g" \
    -e "s/COLOR13/$color13/g" \
    -e "s/COLOR14/$color14/g" \
    -e "s/COLOR15/$color15/g" \
    "$HOME"/.xmonad/template/xmobar/xmobarrc0-template > "$HOME"/.xmonad/xmobar/xmobarrc0

#+end_src
* Thanks to
+ [[https://github.com/andrei-lus/dotfiles][andrei-lus]] for the bar inspiration.
+ [[https://gitlab.com/dwt1/dotfiles/-/tree/master/.xmonad][Distro Tube]] for the amazing Xmonad config (from wich I may have stole something) and also for the tons of tutorial he did on this window manager.
